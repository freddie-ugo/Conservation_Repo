# Create a new column in the original data frame
df$chosen_column <- ifelse(df$common_name %in% chosen_names, df$common_name, NA_character_)
cumulative_sum <- cumulative_sum + data_3_ranked$cost[i]
chosen_names <- c(chosen_names, data_3_rankedf$common_name[i])
if (cumulative_sum + data_3_ranked$cost[i] <= critical_number) {
cumulative_sum <- cumulative_sum + data_3_ranked$cost[i]
chosen_names <- c(chosen_names, data_3_rankedf$common_name[i])
} else {
next  # Exit the loop if adding the current row would exceed the critical number
}
chosen_names <- c(chosen_names, data_3_ranked$common_name[i])
if (cumulative_sum + data_3_ranked$cost[i] <= critical_number) {
cumulative_sum <- cumulative_sum + data_3_ranked$cost[i]
chosen_names <- c(chosen_names, data_3_ranked$common_name[i])
} else {
next  # Exit the loop if adding the current row would exceed the critical number
}
# Iterate through rows
for (i in 1:nrow(data_3_ranked)) {
if (cumulative_sum + data_3_ranked$cost[i] <= critical_number) {
cumulative_sum <- cumulative_sum + data_3_ranked$cost[i]
chosen_names <- c(chosen_names, data_3_ranked$common_name[i])
} else {
next  # Exit the loop if adding the current row would exceed the critical number
}
}
chosen_names <- character(0)
# Initialize variables
cumulative_sum <- 0
# Iterate through rows
for (i in 1:nrow(data_3_ranked)) {
if (cumulative_sum + data_3_ranked$cost[i] <= critical_number) {
cumulative_sum <- cumulative_sum + data_3_ranked$cost[i]
chosen_names <- c(chosen_names, data_3_ranked$common_name[i])
} else {
next
}
}
# Create a new column in the original data frame
data_3_ranked$chosen_column <- ifelse(data_3_ranked$common_name %in% chosen_names, data_3_ranked$common_name, NA_character_)
View(data_3)
View(data_3_ranked)
data_3_ce_ranked <- data_3 %>% arrange(desc(cost_efficiency))
cumulative_sum_2 <- 0
chosen_names_2 <- character(0)
for (i in 1:nrow(data_3_ce_ranked)) {
if (cumulative_sum_2 + data_3_ce_ranked$cost[i] <= critical_number) {
cumulative_sum_2 <- cumulative_sum_2 + data_3_ce_ranked$cost[i]
chosen_names_2 <- c(chosen_names_e, data_3_ce_ranked$common_name[i])
} else {
next
}
}
for (i in 1:nrow(data_3_ce_ranked)) {
if (cumulative_sum_2 + data_3_ce_ranked$cost[i] <= critical_number) {
cumulative_sum_2 <- cumulative_sum_2 + data_3_ce_ranked$cost[i]
chosen_names_2 <- c(chosen_names_2, data_3_ce_ranked$common_name[i])
} else {
next
}
}
data_3_ce_ranked$chosen_column <- ifelse(data_3_ce_ranked$common_name %in% chosen_names_2, data_3_ce_ranked$common_name, NA_character_)
View(data_3_ce_ranked)
# Define the efficiency function
efficiency <- function(x) {
if (x == 0) {
return(0)
} else {
return((10.8648 * x^0.2) / x)
}
}
# Find the maximum efficiency
result <- optimize(efficiency, interval = c(0, 5000000), maximum = TRUE)
result
f_prime <- function(x) 2.17296 * x^(-0.8)
# Find the minimum of the derivative function
result <- optimize(f_prime, interval = c(1, 5000000), maximum = FALSE)
result
# Define the original function
f <- function(x) 10.8648 * x^0.2
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Function to calculate distance from a point to a line
distance_to_line <- function(x, x1, y1, x2, y2) {
# Line equation coefficients (Ax + By + C = 0)
A <- y2 - y1
B <- x1 - x2
C <- x2*y1 - x1*y2
# Distance formula
abs(A * x + B * f(x) + C) / sqrt(A^2 + B^2)
}
# Find the point of maximum distance
optimize(function(x) distance_to_line(x, x_start, y_start, x_end, y_end),
interval = c(0, 5000000),
maximum = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(tidyr)
# Define the function
f <- function(x) 10.8648 * x^0.2
# Create a tibble of x and y values
data <- tibble(x = seq(0, 5000000, length.out = 400)) %>%
mutate(y = f(x))
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Line equation coefficients (Ax + By + C = 0)
A <- y_end - y_start
B <- x_start - x_end
C <- x_end * y_start - x_start * y_end
# Function to calculate distance from a point to a line
distance_to_line <- function(x, y, A, B, C) {
abs(A * x + B * y + C) / sqrt(A^2 + B^2)
}
# Calculate distances and find the maximum
data <- data %>%
mutate(distance = mapply(distance_to_line, x, y, MoreArgs = list(A = A, B = B, C = C))) %>%
arrange(desc(distance)) %>%
slice(1)
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(aes(x = first(data$x), y = first(data$y)), color = "green", size = 4) +
annotate("text", x = first(data$x), y = first(data$y), label = paste("Elbow (", round(first(data$x), 2), ", ", round(first(data$y), 2), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Function to calculate distance from a point to a line
distance_to_line <- function(x, x1, y1, x2, y2) {
# Line equation coefficients (Ax + By + C = 0)
A <- y2 - y1
B <- x1 - x2
C <- x2*y1 - x1*y2
# Distance formula
abs(A * x + B * f(x) + C) / sqrt(A^2 + B^2)
}
# Find the point of maximum distance
optimize(function(x) distance_to_line(x, x_start, y_start, x_end, y_end),
interval = c(0, 5000000),
maximum = TRUE)
# Create a tibble of x and y values
data <- tibble(x = seq(0, 5000000, length.out = 400)) %>%
mutate(y = f(x))
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Line equation coefficients (Ax + By + C = 0)
A <- y_end - y_start
B <- x_start - x_end
C <- x_end * y_start - x_start * y_end
# Function to calculate distance from a point to a line
distance_to_line <- function(x, y, A, B, C) {
abs(A * x + B * y + C) / sqrt(A^2 + B^2)
}
# Calculate distances and find the maximum
data <- data %>%
mutate(distance = mapply(distance_to_line, x, y, MoreArgs = list(A = A, B = B, C = C))) %>%
arrange(desc(distance)) %>%
slice(1)
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(aes(x = first(data$x), y = first(data$y)), color = "green", size = 4) +
annotate("text", x = first(data$x), y = first(data$y), label = paste("Elbow (", round(first(data$x), 2), ", ", round(first(data$y), 2), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
library(ggplot2)
library(dplyr)
library(tidyr)
# Define the function
f <- function(x) 10.8648 * x^0.2
# Create a tibble of x and y values
data <- tibble(x = seq(0, 5000000, length.out = 400)) %>%
mutate(y = f(x))
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Function to calculate distance from a point to a line
distance_to_line <- function(x, y, x1, y1, x2, y2) {
# Line equation coefficients (Ax + By + C = 0)
A <- y2 - y1
B <- x1 - x2
C <- x2 * y1 - x1 * y2
# Distance formula
abs(A * x + B * y + C) / sqrt(A^2 + B^2)
}
# Calculate distances
data <- data %>%
mutate(distance = distance_to_line(x, y, x_start, y_start, x_end, y_end))
# Find the point of maximum distance
elbow_point <- data %>%
arrange(desc(distance)) %>%
slice(1)
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Elbow (", round(elbow_point$x, 2), ", ", round(elbow_point$y, 2), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal (", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), "Species )", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), " Species)", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "x", y = "y")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Graph of y = 10.8648x^0.2 with Elbow Point", x = "Investment (Dollars)", y = "No. Species")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x, 2), ", ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
theme_minimal() +
labs(title = "Investment Curve for Cinnamon Fungus in Eyre and York mallee", x = "Investment (Dollars)", y = "No. Species")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x/1e6, 2), "M, ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
scale_x_continuous(breaks = seq(0, 5000000, by = 1000000), labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal() +
labs(title = "Investment Curve for Cinnamon Fungus in Eyre and York mallee", x = "Investment (Millions of Dollars)", y = "Effectiveness")
library(scales)
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x/1e6, 2), "M, ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
scale_x_continuous(breaks = seq(0, 5000000, by = 1000000), labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal() +
labs(title = "Investment Curve for Cinnamon Fungus in Eyre and York mallee", x = "Investment (Millions of Dollars)", y = "Effectiveness")
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x/1e6, 2), "M, ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
scale_x_continuous(breaks = seq(0, 5000000, by = 1000000), labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal() +
labs(title = "Investment Curve for Cinnamon Fungus in Eyre and York mallee", x = "Investment (Millions of Dollars)", y = "Species")
library(tidyverse)
# New coefficients 'a' for each scenario
a_values <- c(EY_Predator = 28.54242304525335,
MLW_Predator = 33.63630423682513,
EY_Fungus = 10.86482002769821,
MLW_Fungus = 13.79866858264879,
EY_Reveg = 9.142835376180896,
MLW_Reveg = 13.124199312570493)
# Investment required for the area needing action
investment_required <- c(EY_Predator = 1893919,
MLW_Predator = 857850,
EY_Fungus = 6580455,
MLW_Fungus = 2155336,
EY_Reveg = 1312359,
MLW_Reveg = 244982)
# Maximum values of S for each scenario
max_S_values <- c(EY_Predator = 514,
MLW_Predator = 517,
EY_Fungus = 251,
MLW_Fungus = 255,
EY_Reveg = 153,
MLW_Reveg = 157)
max_investment = 5e6
# Define the range of investments
investment_values <- seq(0, max(max_investment), by = 1e4)  # From $0 to max investment
# z value set to 0.2
z_fixed <- 0.2
# Create a dataframe for plotting
plot_data <- expand.grid(Investment = investment_values,
Scenario = names(a_values),
z = z_fixed) %>%
mutate(S = pmin(a_values[Scenario] * Investment ^ z, max_S_values[Scenario]))
# Plotting
ggplot(plot_data, aes(x = Investment, y = S, color = Scenario)) +
geom_line() +
geom_vline(xintercept = investment_required, linetype = "dashed", color = "black") +
labs(title = "Species-Investment Curves with Revised a Values for Required Action (z = 0.2)",
x = "Investment ($)",
y = "Number of Assets Protected (S)",
color = "Intervention and Ecoregion") +
theme_minimal()
library(tidyverse)
# Define the coefficients 'a' for each scenario
a_values <- c(EY_Predator = 32.43120750628193,
MLW_Predator = 32.62049470962599,
EY_Fungus = 15.83702934645285,
MLW_Fungus = 16.089412284244926,
EY_Reveg = 9.653647370546956,
MLW_Reveg = 9.906030308339034)
# Initial investments for each scenario
initial_investments <- data.frame(
Scenario = c("EY_Predator", "MLW_Predator", "EY_Fungus", "MLW_Fungus", "EY_Reveg", "MLW_Reveg"),
Investment = c(569079, 1429750, 0, 0, 294944, 84668)
)
# Define the range of investments
investment_values <- seq(0, 5e6, by = 1e5)  # From $0 to $5 million in $100,000 steps
# Define the range of 'z' values
z_values <- seq(0.1, 0.3, by = 0.05)
# Create a dataframe for plotting
plot_data <- expand.grid(Investment = investment_values,
Scenario = names(a_values),
z = z_values) %>%
mutate(S = a_values[Scenario] * Investment ^ z)
# Plotting
ggplot(plot_data, aes(x = Investment, y = S, color = Scenario, group = interaction(Scenario, z))) +
geom_line() +
geom_vline(data = initial_investments, aes(xintercept = Investment), linetype = "dashed") +
facet_wrap(~ z, scales = "free_y") +
labs(title = "Species-Investment Curves with Initial Investments",
x = "Investment ($)",
y = "Number of Assets Protected (S)",
color = "Intervention and Ecoregion") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales)
# Define the function
f <- function(x) 10.8648 * x^0.2
# Create a tibble of x and y values
data <- tibble(x = seq(0, 5000000, length.out = 400)) %>%
mutate(y = f(x))
# Endpoints
x_start <- 0
x_end <- 5000000
y_start <- f(x_start)
y_end <- f(x_end)
# Function to calculate distance from a point to a line
distance_to_line <- function(x, y, x1, y1, x2, y2) {
# Line equation coefficients (Ax + By + C = 0)
A <- y2 - y1
B <- x1 - x2
C <- x2 * y1 - x1 * y2
# Distance formula
abs(A * x + B * y + C) / sqrt(A^2 + B^2)
}
# Calculate distances
data <- data %>%
mutate(distance = distance_to_line(x, y, x_start, y_start, x_end, y_end))
# Find the point of maximum distance
elbow_point <- data %>%
arrange(desc(distance)) %>%
slice(1)
# Plot
ggplot(data, aes(x, y)) +
geom_line(color = "blue") +
geom_segment(aes(x = x_start, y = y_start, xend = x_end, yend = y_end), linetype = "dashed", color = "red") +
geom_point(data = elbow_point, aes(x = x, y = y), color = "green", size = 4) +
annotate("text", x = elbow_point$x, y = elbow_point$y, label = paste("Optimal ($", signif(elbow_point$x/1e6, 2), "M, ", round(elbow_point$y, 0), ")", sep=""), vjust = -1) +
scale_x_continuous(breaks = seq(0, 5000000, by = 1000000), labels = label_number(scale = 1e-6, suffix = "M")) +
theme_minimal() +
labs(title = "Investment Curve for Cinnamon Fungus in Eyre and York mallee", x = "Investment (Millions of Dollars)", y = "Species")
library(tidyverse)
# Updated coefficients 'a' for each scenario with total investment
a_values <- c(EY_Predator = 25.956915089091986,
MLW_Predator = 28.43370714094852,
EY_Fungus = 10.86482002769821,
MLW_Fungus = 13.79866858264879,
EY_Reveg = 7.374006403670363,
MLW_Reveg = 11.225688499589518)
# Total investment for each scenario (existing + new)
total_investment <- c(EY_Predator = 3044740,
MLW_Predator = 1987400,
EY_Fungus = 6580455,
MLW_Fungus = 2155336,
EY_Reveg = 3845383,
MLW_Reveg = 535098)
# Initial investment for each scenario (already existing)
initial_investment <- c(EY_Predator = 1150821,
MLW_Predator = 1129550,
EY_Fungus = 0,
MLW_Fungus = 0,
EY_Reveg = 2533024,
MLW_Reveg = 290116)
# Maximum values of S for each scenario
max_S_values <- c(EY_Predator = 514,
MLW_Predator = 517,
EY_Fungus = 251,
MLW_Fungus = 255,
EY_Reveg = 153,
MLW_Reveg = 157)
# Define the range of investments
investment_values <- seq(0, max(total_investment), by = 1e4)  # From $0 to max total investment
# z value set to 0.2
z_fixed <- 0.2
# Create a dataframe for plotting
plot_data <- expand.grid(Investment = investment_values,
Scenario = names(a_values),
z = z_fixed) %>%
mutate(S = pmin(a_values[Scenario] * Investment ^ z, max_S_values[Scenario]))
# Create a dataframe for the initial investments points
initial_investment_points <- data.frame(
Scenario = names(initial_investment),
Investment = initial_investment,
S = sapply(names(initial_investment), function(name) a_values[name] * initial_investment[name] ^ z_fixed)
)
# Plotting
ggplot(plot_data, aes(x = Investment, y = S, color = Scenario)) +
geom_line() +
geom_point(data = initial_investment_points, aes(x = Investment, y = S),
shape = 4,  # Shape 4 is a cross
size = 5,  # Adjust the size of the cross here
stroke = 3) +
labs(title = "Species-Investment Curves with Total Investment (z = 0.2)",
x = "Investment ($)",
y = "Number of Assets Protected (S)",
color = "Intervention and Ecoregion") +
theme_minimal()
library(tidyverse)
# New coefficients 'a' for each scenario
a_values <- c(EY_Predator = 28.54242304525335,
MLW_Predator = 33.63630423682513,
EY_Fungus = 10.86482002769821,
MLW_Fungus = 13.79866858264879,
EY_Reveg = 9.142835376180896,
MLW_Reveg = 13.124199312570493)
# Investment required for the area needing action
investment_required <- c(EY_Predator = 1893919,
MLW_Predator = 857850,
EY_Fungus = 6580455,
MLW_Fungus = 2155336,
EY_Reveg = 1312359,
MLW_Reveg = 244982)
# Maximum values of S for each scenario
max_S_values <- c(EY_Predator = 514,
MLW_Predator = 517,
EY_Fungus = 251,
MLW_Fungus = 255,
EY_Reveg = 153,
MLW_Reveg = 157)
max_investment = 5e6
# Define the range of investments
investment_values <- seq(0, max(max_investment), by = 1e4)  # From $0 to max investment
# z value set to 0.2
z_fixed <- 0.2
# Create a dataframe for plotting
plot_data <- expand.grid(Investment = investment_values,
Scenario = names(a_values),
z = z_fixed) %>%
mutate(S = pmin(a_values[Scenario] * Investment ^ z, max_S_values[Scenario]))
# Plotting
ggplot(plot_data, aes(x = Investment, y = S, color = Scenario)) +
geom_line() +
geom_vline(xintercept = investment_required, linetype = "dashed", color = "black") +
labs(title = "Species-Investment Curves with Revised a Values for Required Action (z = 0.2)",
x = "Investment ($)",
y = "Number of Assets Protected (S)",
color = "Intervention and Ecoregion") +
theme_minimal()
