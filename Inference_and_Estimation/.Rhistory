ggplot(aes(sample = extra)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~group)
ks.test(x = trawl %>% pull(extra),
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
# Kolmogorov - Smirnow
trawl %>% filter(group == "altered") %>% pull(extra) %>%
ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
trawl %>% filter(group == "manual") %>% pull(extra) %>%
ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
t.test(x = trawl %>% filter(group == "altered") %>% pull(extra), # X must be greater than Y therefore after has to be first
y = trawl %>% filter(group == "manual") pull(extra),
t.test(x = trawl %>% filter(group == "altered") %>% pull(extra), # X must be greater than Y therefore after has to be first
y = trawl %>% filter(group == "manual") %>% pull(extra),
alternative = "greater",
paired = TRUE,
conf.level = 0.95)
t.test(extra ~ group, data = trawl,
paired = TRUE,
alternative = "two.sided")
library(vegan)
data(BCI)
data(BCI.env)
# Join datasets
diversity(BCI)
# Join datasets
diversity(BCI, index = "shannon")
# Join datasets
BCI.env %>%
mutate(shannon = diversity(BCI, index = "shannon"))
# Join datasets
BCI.env %>%
mutate(shannon = diversity(BCI, index = "shannon"), richness = specnumber(BCI))
# Join datasets
BCI.env %>%
mutate(shannon = diversity(BCI, index = "shannon"),
richness = specnumber(BCI))
# Join datasets
BCI.analysis <- BCI.env %>%
mutate(shannon = diversity(BCI, index = "shannon"),
richness = specnumber(BCI))
shanhab.aov <- aov(shannon ~ Habitat, data = BCI.analysis)
View(shanhab.aov)
summary(shanhab.aov)
coefficients(shanhab.aov) # See the coefficients
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autplot(shanhab.aov)
autoplot(shanhab.aov)
BCI.analysis %>%
filter(Habitat != "Young")
BCI.analysis.exclYoung <- BCI.analysis %>%
filter(Habitat != "Young")
shanhab.aov.exclYoung <- aov(shannon ~ Habitat, data = BCI.analysis.exclYoung)
autoplot(shanhab.aov.exclYoung)
summary(shanhab.aov.exclYoung) # Get the ANOVA table
coefficients(shanhab.aov.exclYoung) # See the coefficients (Mean of first category followed by +/- of the other means)
# Questionable Post Hoc Test
TukeyHSD(shanhab.aov.exclYoung)
df <- data.frame(
before = c(42, 34, 33, 28, 28, 57, 24, 47, 32, 30, 36, 32),
after = c(24, 27, 18, 27, 11, 26, 0, 32, 10, 18, 28, 12)
)
View(df)
View(df)
wilcox.test(x = df$before, y = df$after,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
patrol.wil <- wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
summary(patrol.wil)
patrol.wil <- wilcox.test(x = df$before, y = df$after,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
patrol.wil <- wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
patrol.wil2 <- wilcox.test(x = df$before, y = df$after,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
wilcox.test(x = df$before, y = df$after,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
df.long <- df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment)
View(df.long)
df.long <- df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment) %>%
ggplot(aes(x = treatment, y = value)) +
geom_boxplot()
df.long <- df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment) %>%
ggplot(aes(x = treatment, y = value)) +
geom_boxplot()
df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment) %>%
ggplot(aes(x = treatment, y = value)) +
geom_boxplot()
df %>%
pivot_longer(cols = c("before", "after"),
names_to = "treatment") %>%
ggplot(aes(sample= value, col = treatment)) +
geom_qq() +
stat_qq_line()
df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment) %>%
ggplot(aes(x = treatment, y = value)) +
geom_boxplot()
df %>%
pivot_longer(cols = c("before", "after"),
names_to = "treatment") %>%
ggplot(aes(sample = value, col = treatment)) +
geom_qq() +
stat_qq_line()
wilcox.test(x = df$after, y = df$before,
alternative = "less",
conf.level = 0.95,
paired = TRUE)
df %>%
pivot_longer(cols = c("before", "after"), names_to = "treatment") %>%
group_by(treatment) %>%
ggplot(aes(x = treatment, y = value)) +
geom_boxplot()
library(dplyr)
library(tidyr)
library(ggplot2)
suitability <- read.csv("S7_Prac/suitability.csv")
str(suitability)
suit <- read.csv("S7_Prac/suitability.csv")
str(suit)
rm(suitability)
suit %>%
ggplot(aes(sample = temperature)) +
geom_qq() +
stat_qq_line()
suit %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided"))
suit %>% ks.test(x = temperature,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided"))
suit %>% ks.test(x = temperature,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
suit$temperature %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
suit$humidity %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
suit$humidity %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
# Pearson's Correlation
suit %>%
select(temperature, humidity)
# Pearson's Correlation
suit %>%
select(temperature, humidity) %>%
cor()
# Pearson's Correlation
suit %>%
select(temperature, humidity) %>%
cor(method = "pearson")
#or
cor(suit$temperature, suit$humidity, method = "pearson")
#only know it is meaningful with a staistical test...
#Variables fit assumptions of parametric tess, so can use a correlation test for significance.
cor.test(suit$temperature, suit$humidity, method = "pearson")
# Check normality
suit %>%
ggplot(aes(sample = orchidobs))+
geom_qq() +
stat_qq_line()
cor(suit$treedensity, suit$orchidobs, method = "pearson")
cor(suit$treedensity, suit$orchidobs, method = "spearman")
cor.test(suit$treedensity, suit$orchidobs, method = "spearman")
tempdens.lm <- lm(temperature ~ treedensity, data = suit)
aniva(tempdens.lm)
anova(tempdens.lm)
summary(tempdens.lm)
library(ggfortify)
autoplot(tempdens.lm)
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point()
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point() +
geom_smooth(method = "lm", se = T)
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point() +
geom_smooth(method = "lm", se = F)
tempdens.lm.coef <- coefficients(tempdens.lm)
tempdens.lm.coef[1]
tempdens.lm.coef[2]
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point() +
geom_abline(intercept = tempdens.lm.coef[1], slope = tempdens.lm.coef[2])
suit %>%
ggplot(aes(x = treedensity, y =temperature)) +
geom_point() +
geom_abline(intercept = tempdens.lm.coef[1], slope = tempdens.lm.coef[2], colour = "red")
suit$treedensity %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
suit$treedensity %>% ks.test(x = .,
y = "pnorm",
alternative = "two.sided")
suit %>%
select(treedensity, humidity) %>%
cor(method = "pearson")
cor.test(suit$treedensity, suit$humidity, method = "pearson")
humdens.lm <- lm(humidity ~ treedensity, data = suit)
anova(humdens.lm)
summary(humdens.lm)
autoplot(humdens.lm) # Scale-location tests for homogeniety of variance.
# Plot with line of best fit
humdens.lm.coef <- coefficients(humdens.lm)
# Plot with line of best fit
humdens.lm.coef <- coefficients(humdens.lm)
suit %>%
ggplot(aes(x = treedensity, y =humidity)) +
geom_point() +
geom_abline(intercept = humdens.lm.coef[1], slope = humdens.lm.coef[2], colour = "red")
s
suit$treedensity %>% ks.test(x = .,
y = "pnorm",
alternative = "two.sided")
suit %>%
ggplot(aes(sample = treedensity))+
geom_qq() +
stat_qq_line()
autoplot(humdens.lm)
suit$humidity %>% ks.test(x = .,
y = "pnorm",
alternative = "two.sided")
suit$temperature %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
suit %>%
ggplot(aes(x = treedensity, y = humidity)) +
geom_point()
suit %>%
select(treedensity, humidity) %>%
cor(method = "spearman")
cor.test(suit$treedensity, suit$humidity, method = "spearman")
suit %>%
ggplot(aes(x = treedensity, y = humidity)) +
geom_point()
autoplot(humdens.lm)
suit %>%
ggplot(aes(x = treedensity, y = humidity)) +
geom_point() +
geom_abline(intercept = humdens.lm.coef[1], slope = humdens.lm.coef[2], colour = "red")
library(dgof)
install.packages(dgof)
install.packages("dgof)
install.packages("dgof")
install.packages("dgof")
library(dgof)
suit$humidity %>% ks.test(x = .,
y = "pnorm",
alternative = "two.sided")
suit$temperature %>% ks.test(x = .,
y = "pnorm", #pnorm = normal distribution
alternative = "two.sided")
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggfortify)
library(dgof)
suit <- read.csv("S7_Prac/suitability.csv")
suit %>%
ggplot(aes(sample = temperature)) +
geom_qq() +
geom_qq_line()
suit %>%
ggplot(aes(sample = humidity)) +
geom_qq() +
geom_qq_line()
suit %>%
select(temperature, humidity) %>%
cor(method = "pearson")
cor.test(suit$temperature, suit$humidity, method = "pearson")
glm.temphum <- glm(yield ~ temperature + humidity, data = suit)
coeffs(glm.temphum)
anova(glm.temphum)
anova(glm.temphum, test = "F")
glm.humtemp <- glm(yield ~ humidity + temperature, data = suit)
anova(glm.humtemp, test = "F")
summary(glm.temphum)
summary(glm.humtemp)
suit %>%
ggplot(aes(x = temperature, y = yield)) +
geom_point() +
geom_smooth(method = "lm", se = F)
suit %>%
ggplot(aes(x = humifity, y = yield)) +
geom_point() +
geom_smooth(method = "lm", se = F)
suit %>%
ggplot(aes(x = humidity, y = yield)) +
geom_point() +
geom_smooth(method = "lm", se = F)
autoplot(glm.temphum)
suit %>%
ggplot(aes(x = richness)) +
geom_histogram(bins = 10)
suit %>%
ggplot(aes(sample = richness)) +
geom_qq() +
geom_qq_line()
suit %>%
ggplot(aes(x = richness)) +
geom_histogram(bins = 10)
# Forest type:
glm.richfor <- glm(richness ~ foresttype, data = suit)
autoplot(glm.richfor)
glm.richfor <- glm(log(richness) ~ foresttype, data = suit)
autoplot(glm.richfor)
summary(glm.richfor)
suit %>%
ggplot(aes(x= forestype, y = richness)) +
geom_violin()
suit %>%
ggplot(aes(x= foresttype, y = richness)) +
geom_violin()
# Let's let GLM take care of it for us
glm.richfor <- glm(richness ~ foresttype, data = suit, family = "poisson")
autoplot(glm.richfor)
summary(glm.richfor)
# Let's let GLM take care of it for us
glm.richfor <- glm(richness ~ foresttype, data = suit, family = "poisson")
summary(glm.richfor)
str(suit)
suit %>%
ggplot(aes(sample = orchidpa)) +
geom_qq() +
geom_qq_line()
cor.test(suit$species, suit$soilom, method = "pearson")
cor.test(suit$species, suit$soilom, method = "spearman")
suit$species %>% unique()
# Species explanatory data is categorical so we would not do a correlation test.# Test for association anyway:
t.test(soilom ~ species, data = suit)
#3.
glm.specom <- glm(orchidpa ~ species + soilom, data = suit)
#4.
autplot(glm.specom)
#4.
autoplot(glm.specom)
#1.
suit %>%
ggplot(aes(sample = orchidpa)) +
geom_qq() +
geom_qq_line()
#3.
glm.specom <- glm(orchidpa ~ species + soilom, data = suit, family = "binomial")
#4.
autoplot(glm.specom)
#5.
summary(glm.specom)
#5.
anova(glm.specom, test = "F")
#4.
autoplot(glm.specom)
#5.
anova(glm.specom, test = "Chisq")
#5.
anova(glm.specom, test = "F")
#6.
summary(glm.specom)
value <- -0.90356
exp(value)/(1+exp(value))
# Interactions:
glm.int.specom <- glm(orchidpa ~ species * soilom, data = suit, family = "binomial")
glm.int.typden <- glm(temperature ~ foresttype * treedensity, data = suit)
autoplot(glm.int.typden)
anova(glm.int.typden)
summary(glm.int.typden)
anova(glm.int.typden, test = "F")
summary(glm.int.typden)
suit %>%
ggplot(aes(x = treedensity, y = temperature, col = foresttype))
suit %>%
ggplot(aes(x = treedensity, y = temperature, col = foresttype)) +
geom_point()
# Create dummy dataframe
expand_grid(foresttype = suit$foresttype %>% unique,
treedensity = seq(from = 0, to = 0.6, 0.02))
# Create dummy dataframe
glm.inttypden.predict <- expand_grid(foresttype = suit$foresttype %>% unique,
treedensity = seq(from = 0, to = 0.6, 0.02))
predict(glm.int.typden, glm.inttypden.predict, se.fit = T)
glm.inttypden.predictobj <- predict(glm.int.typden, glm.inttypden.predict, se.fit = T)
glm.inttypden.predict <- glm.inttypden.predict %>%
mutate(temperature = glm.inttypden.predictobj$fit, se = glm.inttypden.predictobj$se.fit)
# Add these to our plot
ggplot(mapping = aes(x = treedensity, y = temperature, col = foresttype)) + # Note the mapping = aes
geom_point(data = suit) +
geom_line(data = glm.inttypden.predict)
# Add these to our plot!! More manual way
ggplot(mapping = aes(x = treedensity, y = temperature, col = foresttype)) + # Note the mapping = aes
geom_point(data = suit) +
geom_line(data = glm.inttypden.predict) +
geom_ribbon(data = glm.inttypden.predict$se)
# Add these to our plot!! More manual way
ggplot(mapping = aes(x = treedensity, y = temperature, col = foresttype)) + # Note the mapping = aes
geom_point(data = suit) +
geom_line(data = glm.inttypden.predict) +
geom_ribbon(data = glm.inttypden.predict, mapping = aes(ymin = temperature - se, ymax = temperature +se))
# Add these to our plot!! More manual way
ggplot(mapping = aes(x = treedensity, y = temperature, col = foresttype)) + # Note the mapping = aes
geom_point(data = suit) +
geom_line(data = glm.inttypden.predict) +
geom_ribbon(data = glm.inttypden.predict, mapping = aes(ymin = temperature - se, ymax = temperature + se, fill = foresttype),
col = NA, alpha = 0.4)
glm.specom.predict <- expand_grid(
species = c("A", "B"),
soilom = seq(from = 0, to = 40, by = 0.5)
)
glm.specom.predict <- glm.inttypden.predict %>%
mutate(orchidpa = glm.specom.predictobj$fit,
orchidpa.se = glm.specom.predictobj$se.fit)
glm.specom.predictobj <- predict(glm.specom, glm.specom.predict, type = "response", se.fit = T) # type = response back transforms for us
glm.specom.predict <- glm.inttypden.predict %>%
mutate(orchidpa = glm.specom.predictobj$fit,
orchidpa.se = glm.specom.predictobj$se.fit)
glm.specom.predict <- expand_grid(
species = c("A", "B"),
soilom = seq(from = 0, to = 40, by = 0.5)
)
glm.specom.predictobj <- predict(glm.specom, glm.specom.predict, type = "response", se.fit = T) # type = response back transforms for us
glm.specom.predict <- glm.inttypden.predict %>%
mutate(orchidpa = glm.specom.predictobj$fit,
orchidpa.se = glm.specom.predictobj$se.fit)
ggplot(mapping = aes(x = soilom, y = orchidpa, col = species)) +
geom_point(data = suit) +
geom_line(data = glm.specom.predict) +
facet_wrap( ~ species)
ggplot(mapping = aes(x = soilom, y = orchidpa, col = species)) +
geom_point(data = suit) +
geom_line(data = glm.specom.predict) +
geom_ribbon(data = glm.specom.predict,
mapping = aes(ymin = orchidpa=orchidpa.se,
ggplot(mapping = aes(x = soilom, y = orchidpa, col = species)) +
geom_point(data = suit) +
geom_line(data = glm.specom.predict) +
geom_ribbon(data = glm.specom.predict,
mapping = aes(ymin = orchidpa=orchidpa.se,
glm.specom.predict <- expand_grid(
species = c("A", "B"),
soilom = seq(from = 0, to = 40, by = 0.5)
)
glm.specom.predictobj <- predict(glm.specom, glm.specom.predict, type = "response", se.fit = T) # type = response back transforms for us
glm.specom.predict <- glm.inttypden.predict %>%
mutate(orchidpa = glm.specom.predictobj$fit,
orchidpa.se = glm.specom.predictobj$se.fit)
glm.specom.predict <- glm.specom.predict %>%
mutate(orchidpa = glm.specom.predictobj$fit,
orchidpa.se = glm.specom.predictobj$se.fit)
ggplot(mapping = aes(x = soilom, y = orchidpa, col = species)) +
geom_point(data = suit) +
geom_line(data = glm.specom.predict) +
geom_ribbon(data = glm.specom.predict,
mapping = aes(ymin = orchidpa=orchidpa.se,
ggplot(mapping = aes(x = soilom, y = orchidpa, col = species)) +
geom_point(data = suit) +
geom_line(data = glm.specom.predict) +
geom_ribbon(data = glm.specom.predict,
mapping = aes(ymin = orchidpa - orchidpa.se,
ymax = orchidpa+orchidpa.se,
fill = species),
col = NA, alpha = 0.4) +
facet_wrap( ~ species)
